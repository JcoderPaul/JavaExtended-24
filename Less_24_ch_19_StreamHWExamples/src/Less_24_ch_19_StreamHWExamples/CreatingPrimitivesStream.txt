(Информация не полная)

Stream API - новый способ взаимодействия с данными, представляя
их в виде конечного потока данных.

В Java 8 создание Stream-ов примитивов напрямую невозможно, из-за
дженериков. Но разработчики сделали Stream-ы примитивов :
- IntStream,
- LongStream,
- DoubleStream.

******* Создание стримов примитивных данных *******
Для создание Stream-а примитивов можно воспользоваться одним из методов

*** Метод 1. - используя синтаксический конструкт *.of()
------------------------------------------------------------------------
public static void main(String[] args) {
    IntStream intStream = IntStream.of(1, 2, 3, 4);
    LongStream longStream = LongStream.of(5, 6, 7, 8);
    DoubleStream doubleStream = DoubleStream.of(9, 10, 11, 12);
    }
------------------------------------------------------------------------

*** Метод 2. - используя синтаксический конструкт *.range()
При использовании метода range мы указываем 2 параметра, startInclusive и
endExclusive, после чего у нас генерируется Stream в указанном диапазоне.
DoubleStream данный метод не поддерживает.

------------------------------------------------------------------------
public static void main(String[] args) {
    IntStream intStream = IntStream.range(1, 100);
    // Диапазон - от 1 до 99 (нижняя граница включена, верхняя нет)
    LongStream longStream = LongStream.range(2, 200);
    // Диапазон от - 2 до 199 (нижняя граница включена, верхняя нет)
    DoubleStream doubleStream = DoubleStream.range(3, 300);
    // метода нет, не компилируется
}
------------------------------------------------------------------------

*** Метод 3. - используя синтаксический конструкт *.rangeClosed()
Метод схож с предыдущим за одним исключением, диапазон теперь включает
последнее значение (верхнюю границу диапазона).

------------------------------------------------------------------------
public static void main(String[] args) {
    IntStream intStream = IntStream.rangeClosed(1, 100);
    // Диапазон - от 1 до 100
    LongStream longStream = LongStream.rangeClosed(2, 200);
    // Диапазон - от 2 до 200
    DoubleStream doubleStream = DoubleStream.rangeClosed(3, 300);
    // метода нет, не компилируется (предупреждение среды разработки)
}
------------------------------------------------------------------------

******* Промежуточные операции *******
Промежуточные операции такие же как в обычных Stream-ах, но так же есть
множество особенных (ниже рассмотрены не все). Рассмотрим только несколько.

*** asIntStream, asLongStream, asDoubleStream ***
IntStream можно преобразовать в LongStream, либо в DoubleStream.
LongStream только в DoubleStream.
DoubleStream назад не преобразуется.
------------------------------------------------------------------------
public static void main(String[] args) {
    DoubleStream doubleStream = IntStream
            .rangeClosed(1, 100)
            .asLongStream()
            .asDoubleStream();
}
------------------------------------------------------------------------

*** toArray ***
Все примитивные стримы можно преобразовать в массив примитивов

------------------------------------------------------------------------
public static void main(String[] args) {
    int[] ints = IntStream.of(1, 2).toArray(); // [1, 2]
    long[] longs = LongStream.of(3, 4).toArray(); // [3, 4]
    double[] doubles = DoubleStream.of(5, 6).toArray(); // [5.0, 6.0]
}
------------------------------------------------------------------------

*** Терминальные операции ***
Терминальные операции взяты из Stream-ов объектов,
но так же есть особенные, мы рассмотрим только
несколько.

*** Sum ***
------------------------------------------------------------------------
public static void main(String[] args) {
    int intSum = IntStream.of(1, 2).sum(); // 3
    long longSum = LongStream.of(3, 4).sum(); // 7
    double doubleSum = DoubleStream.of(5, 6).sum(); // 11
}
------------------------------------------------------------------------
или
------------------------------------------------------------------------
int sum = IntStream.of(20, 98, 12, 7, 35)
                   .sum(); // returns 172
------------------------------------------------------------------------
или каскад из Range и Sum
------------------------------------------------------------------------
int sum = IntStream.range(1, 10)
                   .sum(); // returns 45
int sum = IntStream.rangeClosed(1, 10)
                   .sum(); // returns 55
------------------------------------------------------------------------

*** Average ***
Получить среднее значение довольно легко, однако нужно помнить, что метод
average возвращает OptionalDouble, обертку над double, а не само значение.

------------------------------------------------------------------------
public static void main(String[] args) {
    OptionalDouble intAverage = IntStream.of(1, 2).average(); // 1.5
    OptionalDouble longAverage = LongStream.of(3, 4).average(); // 3.5
    OptionalDouble doubleAverage = DoubleStream.of(5, 6).average(); // 5.5
}
------------------------------------------------------------------------
или
------------------------------------------------------------------------
double avg = IntStream.of(20, 98, 12, 7, 35)
                      .average()
                      .getAsDouble(); // returns 34.4
------------------------------------------------------------------------

*** forEach ***
------------------------------------------------------------------------
public static void main(String[] args) {
    IntStream.of(1, 3, 5, 7, 9)
             .filter((i) -> i > 3)
             .forEach(System.out::println); //output 5 7 9
}
------------------------------------------------------------------------

*** min ***
------------------------------------------------------------------------
int[] integers = new int[] {20, 98, 12, 7, 35};
int min = Arrays.stream(integers)
                .min()
                .getAsInt(); // returns 7
------------------------------------------------------------------------

*** max ***
------------------------------------------------------------------------
int max = IntStream.of(20, 98, 12, 7, 35)
  .max()
  .getAsInt(); // returns 98
------------------------------------------------------------------------