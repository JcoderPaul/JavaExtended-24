Большинство операций класса Stream, которые модифицируют набор данных, возвращают этот набор
в виде потока. Однако бывают ситуации, когда хотелось бы получить данные не в виде потока, а
в виде обычной коллекции, например, ArrayList или HashSet. И для этого у класса Stream есть
метод collect.

*** >> Первая версия метода принимает в качестве параметра функцию преобразования коллекции:
 - <R,A> R collect(Collector<? super T,A,R> collector)
Где, параметр R - представляет тип результата метода,
     параметр Т - тип элемента в потоке,
     параметр А - тип промежуточных накапливаемых данных.
В итоге параметр collector представляет функцию преобразования потока в коллекцию.

Конечно мы можем написать свою реализацию функции (см. прим Less_24_ch_12_Stream_Collect),
однако Java уже предоставляет ряд встроенных функций, определенных в классе Collectors:
- toList(): преобразование к типу List (см. прим Less_24_Stream_to_List_Step4)
- toSet(): преобразование к типу Set (см. прим Less_24_Stream_to_Set_Step5)
- toMap(): преобразование к типу Map

Для применения метода toMap() надо задать ключ и значение (см. прим Less_24_Stream_to_Map_Step6).
Если нам надо создать какой-то определенный тип коллекции, например, HashSet, то мы можем
использовать специальные функции, которые определены в классах-коллекций.
(см. прим Less_24_Stream_to_HashSet_Step7)

*** >> Вторая форма метода collect имеет три параметра:
<R> R collect(Supplier<R> supplier, BiConsumer<R,? super T> accumulator, BiConsumer<R,R> combiner)
- supplier: создает объект коллекции;
- accumulator: добавляет элемент в коллекцию;
- combiner: бинарная функция, которая объединяет два объекта;

Применим эту версию метода collect:

Еще один пример рассмотрен: Less_24_ch_12_Stream_Collect\Less_24_Interface_Collector_Step3.java
Описание класса и интерфейса: Less_24_ch_12_Stream_Collect\ReadMe.txt

(Уроки напоминалки Less_24_ch_12_Stream_Collect и Less_24_ch_16_Stream_MapToInt связанны, описания
в ReadMe.txt обоих уроков дополняют друг друга, как и примеры, где-то проще, где-то сложнее)