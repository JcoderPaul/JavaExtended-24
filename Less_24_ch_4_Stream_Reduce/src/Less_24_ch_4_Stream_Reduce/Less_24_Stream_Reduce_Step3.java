package Less_24_ch_4_Stream_Reduce;
/*
- Метод reduce выполняет терминальные операции сведения, возвращая некоторое значение -
результат операции.
*/
import java.util.ArrayList;
import java.util.List;

public class Less_24_Stream_Reduce_Step3 {
    public static void main(String[] args) {
        List<Integer> arr_int = new ArrayList<>();
        arr_int.add(4);
        arr_int.add(2);
        arr_int.add(8);
        arr_int.add(3);
        arr_int.add(6);
        arr_int.add(9);

        /*
        Метод T reduce(T identity, BinaryOperator<T> accumulator)принимает два параметра:
        - Первый параметр - T identity - элемент, который предоставляет начальное значение для функции
        из второго параметра, а также предоставляет значение по умолчанию, если поток не имеет элементов.
        - Второй параметр - BinaryOperator<T> accumulator, как и первая форма метода reduce, представляет
        ассоциативную функцию, которая запускается для каждого элемента в потоке и принимает два параметра.
        Первый параметр представляет промежуточный результат функции, а второй параметр - следующий элемент
        в потоке.

        Выполняется следующая цепь операций: 'identity' op 'n1' op 'n2' op 'n3' op 'n4' ...,
        где op - это операция (в данном случае умножения), а 'n1', 'n2', ... - элементы из стрима.

        То есть при первом вызове функция accumulator в качестве первого параметра принимает значение
        identity, а в качестве второго параметра - первый элемент потока. При втором вызове первым
        параметром служит результат первого вызова функции accumulator, а вторым параметром - второй
        элемент в потоке и так далее.
        */
//******************************************************************************************************
        int result_of_reduce =
                // Создали стрим из листа
                arr_int.stream().
                // Применили метод reduce ('10' * 4 * 2 * 8 * 3 * 6 * 9 = 10368)
                reduce(10,(accumulator, element) -> accumulator*element);
        System.out.println(result_of_reduce);
        /*
        ШАГ РАСЧЕТА МЕТОДА REDUCE: 1    2    3     4      5      6
        accumulator =              40   80   640   1920   11520  103680
        ДЕЙСТВИЕ = *
        element =                  4    2    8     3      6      9
        identity =                 10
        РЕЗУЛЬТАТ ОПЕРАЦИИ:        40   80   640   1152   11520  103608
        */
  }
}
