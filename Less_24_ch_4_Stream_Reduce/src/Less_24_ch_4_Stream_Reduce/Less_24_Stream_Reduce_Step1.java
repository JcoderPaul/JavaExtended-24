package Less_24_ch_4_Stream_Reduce;
/*
- Метод reduce выполняет терминальные операции сведения, возвращая некоторое значение -
результат операции.
*/
import java.util.ArrayList;
import java.util.List;

public class Less_24_Stream_Reduce_Step1 {
    public static void main(String[] args) {
        List<Integer> arr_int = new ArrayList<>();
        arr_int.add(4);
        arr_int.add(2);
        arr_int.add(8);
        arr_int.add(3);
        arr_int.add(6);
        arr_int.add(9);

        /*
        1. Объект BinaryOperator<T> представляет функцию, которая принимает два элемента и выполняет
        над ними некую операцию, возвращая результат. При этом метод reduce сохраняет результат
        и затем снова применяет к этому результату и следующему элементу в наборе, ту же бинарную операцию.

        Фактически в данном случае мы получим результат, который будет равен:
        'n1' op 'n2' op 'n3' op 'n4' op 'n5' op 'n6', где op - это операция (в данном случае умножения),
        а 'n1', 'n2', ... - элементы из потока.

        2. Метод get() возвращает результат вычислений: result.get()
        */
//******************************************************************************************************
        int result_of_reduce =
                // Создали стрим из листа
                arr_int.stream().
                // Применили метод reduce (4 * 2 * 8 * 3 * 6 * 9 = 10368)
                reduce((accumulator, element) -> accumulator*element).
                // Возвращаем результат операций над стримом, терминальная операция
                get();
        System.out.println(result_of_reduce);
        /*
        ШАГ РАСЧЕТА МЕТОДА REDUCE: 1  2   3    4     5     6
        accumulator =              4  8   64   192   1152  10368
        ДЕЙСТВИЕ = *
        element =                  2  8   3    6     9
        РЕЗУЛЬТАТ ОПЕРАЦИИ:        8  64  192  1152  10368
        */
//******************************************************************************************************
        int another_result_of_reduce =
                // Создали стрим из листа
                arr_int.stream().
                        // Применили метод reduce (4 - 2 - 3 - 6 - 8 - 9 = -24)
                                reduce((minuend, element) -> minuend-element).
                        // Возвращаем результат операций над стримом, терминальная операция
                                get();
        System.out.println(another_result_of_reduce);
        /*
        ШАГ РАСЧЕТА МЕТОДА REDUCE: 1  2   3   4   5   6
        accumulator =              4  2  -1  -7  -15 -24
        ДЕЙСТВИЕ = -
        element =                  2  3   6   8   9
        РЕЗУЛЬТАТ ОПЕРАЦИИ:        2 -1  -7  -15 -24
        */
//******************************************************************************************************
    }
}
