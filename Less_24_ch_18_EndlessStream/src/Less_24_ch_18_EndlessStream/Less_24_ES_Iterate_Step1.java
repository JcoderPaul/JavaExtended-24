package Less_24_ch_18_EndlessStream;
/*
Использование IntStream.iterate() метода
 */
import java.util.stream.IntStream;

public class Less_24_ES_Iterate_Step1 {
    public static void main(String[] args) {

    /*
    IntStream.iterate(0, i -> i + 1) // Создаем бесконечный стрим
             .forEach(System.out::println); // Выводим его на экран

    Приведенный выше код эквивалентен следующему бесконечному циклу for:

    for (int i = 0; ;i++) {
          System.out.println(i);
    }

    Естественно, мы можем ограничить бесконечность и вызвать метод limit() для ограничения размера
    стрима сверху. Так же можно ограничить наш бесконечный стрим снизу вызвав метод skip(), который
    пропустит n - первых элементов стрима, см. пример ниже:

    пропустить первые 100 элементов бесконечного потока и вывести следующие 900 элементов, т.е. до 1000

    */

            /*
            Формируем стрим, начинаем с 0 и до .... однако в работу влезает *.skip()
            */
    IntStream.iterate(0, i -> i + 1).
            /*
            Пропускаем первые 100 элементов (на экране вывод начнется со 100), промежуточная операция,
            которая формирует новый стрим элементов от 100 ...... до бесконечности
            */
            skip(100).
            /*
            Противоположная ситуация, в стрим поступят первые 1000 элементов, но не первоначального стрима
            (от 0 .... до), а стрима, который сформировал метод *.skip() (от 100 .... до ). Это тоже
            промежуточная операция, которая сформирует стрим из первых 1000 элементов, начиная со 100
            и передаст дальше. На экран попадет 100 .... 1099
            ('1100' фактически уже 1001 элемент и он в итоговый стрим, закрытый терминальной операцией, не влез)
            */
            limit(1000).
            forEach(System.out::println);

    }
}
