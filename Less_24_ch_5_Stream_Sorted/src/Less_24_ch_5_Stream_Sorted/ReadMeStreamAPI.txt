(*** Здесь поток, потоки - стрим, стримы. Stream - стремнина, течь, ручей, струя.
Их еще называют потоками, но это не Thread. ***)

Начиная с JDK 8 в Java появился новый API - Stream API. Его задача - упростить работу с наборами данных,
в частности, упростить операции фильтрации, сортировки и другие манипуляции с данными. Вся основная
функциональность данного API сосредоточена в пакете java.util.stream.

Ключевым понятием в Stream API является поток данных. Вообще сам термин "поток" довольно перегружен в
программировании в целом и в Java в частности. Применительно к Stream API поток представляет канал передачи
данных из источника данных. Причем в качестве источника могут выступать как файлы, так и массивы и коллекции.

Одной из отличительных черт Stream API является применение лямбда-выражений, которые позволяют значительно
сократить запись выполняемых действий.

При работе со Stream API важно понимать, что все операции с потоками бывают либо терминальными (terminal),
либо промежуточными (intermediate). Промежуточные операции возвращают трансформированный поток.
Например, метод filter может принимать стрим (поток) чисел и возвращать уже отфильтрованный стрим
(преобразованный поток), в котором только числа удовлетворяющие определенным условиям. К возвращенному стриму
(потоку) также можно применить ряд промежуточных операций.

Конечные или терминальные операции возвращают конкретный результат. Например, метод count() представляет
терминальную операцию и возвращает некое число. После этого никаких промежуточных операций естественно
применять нельзя, т.к. мы уже имеем дело с единственным конечным значением.

Все стримы производят вычисления, в том числе в промежуточных операциях, только тогда, когда к ним применяется
терминальная операция. То есть в данном случае применяется отложенное выполнение.

При работе со стримами, которые представляют определенный примитивный тип - double, int, long проще использовать
интерфейсы DoubleStream, IntStream, LongStream. Но в большинстве случаев, как правило, работа происходит с
более сложными данными, для которых предназначен интерфейс Stream<T>.

******************* Терминальные операции Stream API *******************
- boolean allMatch(Predicate<? super T> predicate): возвращает true, если все элементы потока удовлетворяют
условию в предикате.

- boolean anyMatch(Predicate<? super T> predicate): возвращает true, если хоть один элемент потока удовлетворяют
условию в предикате.

- <R,A> R collect(Collector<? super T,A,R> collector): добавляет элементы в неизменяемый контейнер с типом <R>.
<T> представляет тип данных из вызывающего потока, а <A> - тип данных в контейнере.

- long count(): возвращает количество элементов в потоке.

- Optional<T> findFirst(): возвращает первый элемент из потока.

- Optional<T> findAny(): возвращает первый попавшийся элемент из потока.

- void forEach(Consumer<? super T> action): для каждого элемента выполняется действие action.

- Optional<T> max(Comparator<? super T> comparator): возвращает максимальный элемент из потока.
Для сравнения элементов применяется компаратор comparator.

- Optional<T> min(Comparator<? super T> comparator): возвращает минимальный элемент из потока.
Для сравнения элементов применяется компаратор comparator.

- boolean noneMatch(Predicate<? super T> predicate): возвращает true, если ни один из элементов в
потоке не удовлетворяет условию в предикате.

- Object[] toArray(): возвращает массив из элементов потока.

******************* Промежуточные операции Stream API *******************
- Stream<T> concat(Stream<? extends T> a, Stream<? extends T> b): объединяет два потока.

- Stream<T> distinct(): возвращает поток, в котором имеются только уникальные данные с типом T.

- Stream<T> dropWhile(Predicate<? super T> predicate): пропускает элементы, которые соответствуют
условию в predicate, пока не попадется элемент, который не соответствует условию. Выбранные элементы
возвращаются в виде потока.

- Stream<T> filter(Predicate<? super T> predicate): фильтрует элементы в соответствии с условием в предикате.

- Stream<T> limit(long maxSize): оставляет в потоке только maxSize элементов.

- <R> Stream<R> map(Function<? super T,? extends R> mapper): преобразует элементы типа T в элементы типа R
и возвращает поток с элементами R.

- <R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper): позволяет преобразовать
элемент типа T в несколько элементов типа R и возвращает поток с элементами R.

- Stream<T> skip(long n): возвращает поток, в котором отсутствуют первые n элементов.

- Stream<T> sorted(): возвращает отсортированный поток.

- Stream<T> sorted(Comparator<? super T> comparator): возвращает отсортированный в соответствии с компаратором
поток.

- Stream<T> takeWhile(Predicate<? super T> predicate): выбирает из потока элементы, пока они соответствуют
условию в predicate. Выбранные элементы возвращаются в виде потока.

****************************************************************************************************************
Основные особенности стримов:
- Стримы не хранят элементы. Элементы, используемые в стримах, могут храниться в коллекции, либо
при необходимости могут быть напрямую сгенерированы.
- Операции со стримами не изменяют источника данных. Операции со стримами лишь возвращают новый
стрим с результатами этих операций.
- Для стримов характерно отложенное выполнение. То есть выполнение всех операций со стримами происходит
лишь тогда, когда выполняется терминальная операция и возвращается конкретный результат, а не новый стрим.