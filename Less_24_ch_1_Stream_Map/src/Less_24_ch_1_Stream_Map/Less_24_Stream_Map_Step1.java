package Less_24_ch_1_Stream_Map;
/*
Stream - стремнина, течь, ручей, струя. Их еще называют потоками, но это не Thread.
Основные особенности стримов:
- Стримы не хранят элементы. Элементы, используемые в стримах, могут храниться в коллекции, либо
при необходимости могут быть напрямую сгенерированы.
- Операции со стримами не изменяют источника данных. Операции со стримами лишь возвращают новый
стрим с результатами этих операций.
- Для стримов характерно отложенное выполнение. То есть выполнение всех операций со стримами происходит
лишь тогда, когда выполняется терминальная операция и возвращается конкретный результат, а не новый стрим.
*/

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/*
<R> Stream<R> map(Function<? super T,? extends R> mapper): преобразует элементы типа T в элементы типа R и
возвращает поток с элементами R. Промежуточная операция.
*/
public class Less_24_Stream_Map_Step1 {
    public static void main(String[] args) {
        //*************************************************************************************
        List<String> raduga = new ArrayList<>();
        raduga.add("Каждый");
        raduga.add("охотник");
        raduga.add("желает");
        raduga.add("знать");
        raduga.add("где");
        raduga.add("сидит");
        raduga.add("фазан");
        for (String str_prn: raduga) {
            System.out.print(str_prn + " ");
        }
        // Простая задача на преобразование элементов строкового листа в длины строк
        for(int i = 0; i < raduga.size(); i++){
            raduga.set(i,String.valueOf(raduga.get(i).length()));
        }
        // Правда в данном случае мы изменили наш лист, то о чем пойдет речь ниже лист не меняет
        System.out.println("\n--------------------------------------------------");
        for (String str_prn: raduga) {
            System.out.print(str_prn + " ");
        }
        System.out.println("\n--------------------- Stream API методы ---------------------");
        // Заполним наш лист старыми данными
        raduga.removeAll(raduga);
        raduga.add("Каждый");
        raduga.add("охотник");
        raduga.add("желает");
        raduga.add("знать");
        raduga.add("где");
        raduga.add("сидит");
        raduga.add("фазан");
        /*
        Задачу по поиску длин всех слов в листе можно решить используя методы Stream API и Лямбда
        выражения. Код получится короче (визуально). Вся работа начинается с создания экземпляра
        Stream, который опирается на нужную нам коллекцию, массив или их метод и откуда соответственно
        будут браться данные.
        */
        Stream<String> myStream = raduga.stream(); // Формируем стрим (словно в капилярную трубку заливаем воду)
        /*
        Шаг 2. Метод map(Function<? super T,? extends R> mapper): преобразует элементы типа <T> в элементы
        типа <R> и возвращает поток с элементами <R>. Внутрь метода поставляется лямбда выражение описывающее
        необходимые преобразования (интерфейс Function).

        Шаг 3. <R,A> R collect(Collector<? super T,A,R> collector): добавляет элементы в неизменяемый контейнер
        с типом <R>. <T> представляет тип данных из вызывающего потока, а <A> - тип данных в контейнере.
        */

        List<Integer> int_list = // Присваиваем новому листу результаты работы всего набора методов
          myStream. // Шаг 1. stream() получил данные из листа raduga;
          map(element_of_list -> element_of_list.length()). // Шаг 2. Преобразовали элементы листа в новый стрим с длинами
          collect(Collectors.toList()); // Шаг 3. Терминальная операция. Превратили стрим в новый лист, но уже int

        for (Integer int_prn: int_list){
            System.out.print(int_prn + " ");
        }
        /*
        При этом наш первоначальный лист String-ов остался неизменным в отличие от
        первого случая, т.е. stream не меняет исходный лист.
        */
        System.out.println("\n--------------------------------------------------");
        for (String str_prn: raduga) {
            System.out.print(str_prn + " ");
        }
    }
}
